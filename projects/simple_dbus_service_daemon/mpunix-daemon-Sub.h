/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __MPUNIX_DAEMON_SUB_H__
#define __MPUNIX_DAEMON_SUB_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.mpunixDaemon.Add */

#define TYPE_COM_MPUNIX_DAEMON_ADD (com_mpunix_daemon_add_get_type ())
#define COM_MPUNIX_DAEMON_ADD(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_MPUNIX_DAEMON_ADD, ComMpunixDaemonAdd))
#define IS_COM_MPUNIX_DAEMON_ADD(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_MPUNIX_DAEMON_ADD))
#define COM_MPUNIX_DAEMON_ADD_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_COM_MPUNIX_DAEMON_ADD, ComMpunixDaemonAddIface))

struct _ComMpunixDaemonAdd;
typedef struct _ComMpunixDaemonAdd ComMpunixDaemonAdd;
typedef struct _ComMpunixDaemonAddIface ComMpunixDaemonAddIface;

struct _ComMpunixDaemonAddIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_add) (
    ComMpunixDaemonAdd *object,
    GDBusMethodInvocation *invocation,
    gint arg_a,
    gint arg_b);

};

GType com_mpunix_daemon_add_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *com_mpunix_daemon_add_interface_info (void);
guint com_mpunix_daemon_add_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void com_mpunix_daemon_add_complete_add (
    ComMpunixDaemonAdd *object,
    GDBusMethodInvocation *invocation,
    gint result);



/* D-Bus method calls: */
void com_mpunix_daemon_add_call_add (
    ComMpunixDaemonAdd *proxy,
    gint arg_a,
    gint arg_b,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com_mpunix_daemon_add_call_add_finish (
    ComMpunixDaemonAdd *proxy,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean com_mpunix_daemon_add_call_add_sync (
    ComMpunixDaemonAdd *proxy,
    gint arg_a,
    gint arg_b,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_COM_MPUNIX_DAEMON_ADD_PROXY (com_mpunix_daemon_add_proxy_get_type ())
#define COM_MPUNIX_DAEMON_ADD_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_MPUNIX_DAEMON_ADD_PROXY, ComMpunixDaemonAddProxy))
#define COM_MPUNIX_DAEMON_ADD_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_COM_MPUNIX_DAEMON_ADD_PROXY, ComMpunixDaemonAddProxyClass))
#define COM_MPUNIX_DAEMON_ADD_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_COM_MPUNIX_DAEMON_ADD_PROXY, ComMpunixDaemonAddProxyClass))
#define IS_COM_MPUNIX_DAEMON_ADD_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_MPUNIX_DAEMON_ADD_PROXY))
#define IS_COM_MPUNIX_DAEMON_ADD_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_COM_MPUNIX_DAEMON_ADD_PROXY))

typedef struct _ComMpunixDaemonAddProxy ComMpunixDaemonAddProxy;
typedef struct _ComMpunixDaemonAddProxyClass ComMpunixDaemonAddProxyClass;
typedef struct _ComMpunixDaemonAddProxyPrivate ComMpunixDaemonAddProxyPrivate;

struct _ComMpunixDaemonAddProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ComMpunixDaemonAddProxyPrivate *priv;
};

struct _ComMpunixDaemonAddProxyClass
{
  GDBusProxyClass parent_class;
};

GType com_mpunix_daemon_add_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ComMpunixDaemonAddProxy, g_object_unref)
#endif

void com_mpunix_daemon_add_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ComMpunixDaemonAdd *com_mpunix_daemon_add_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ComMpunixDaemonAdd *com_mpunix_daemon_add_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void com_mpunix_daemon_add_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ComMpunixDaemonAdd *com_mpunix_daemon_add_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ComMpunixDaemonAdd *com_mpunix_daemon_add_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_COM_MPUNIX_DAEMON_ADD_SKELETON (com_mpunix_daemon_add_skeleton_get_type ())
#define COM_MPUNIX_DAEMON_ADD_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_MPUNIX_DAEMON_ADD_SKELETON, ComMpunixDaemonAddSkeleton))
#define COM_MPUNIX_DAEMON_ADD_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_COM_MPUNIX_DAEMON_ADD_SKELETON, ComMpunixDaemonAddSkeletonClass))
#define COM_MPUNIX_DAEMON_ADD_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_COM_MPUNIX_DAEMON_ADD_SKELETON, ComMpunixDaemonAddSkeletonClass))
#define IS_COM_MPUNIX_DAEMON_ADD_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_MPUNIX_DAEMON_ADD_SKELETON))
#define IS_COM_MPUNIX_DAEMON_ADD_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_COM_MPUNIX_DAEMON_ADD_SKELETON))

typedef struct _ComMpunixDaemonAddSkeleton ComMpunixDaemonAddSkeleton;
typedef struct _ComMpunixDaemonAddSkeletonClass ComMpunixDaemonAddSkeletonClass;
typedef struct _ComMpunixDaemonAddSkeletonPrivate ComMpunixDaemonAddSkeletonPrivate;

struct _ComMpunixDaemonAddSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ComMpunixDaemonAddSkeletonPrivate *priv;
};

struct _ComMpunixDaemonAddSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType com_mpunix_daemon_add_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ComMpunixDaemonAddSkeleton, g_object_unref)
#endif

ComMpunixDaemonAdd *com_mpunix_daemon_add_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for com.mpunixDaemon.Sub */

#define TYPE_COM_MPUNIX_DAEMON_SUB (com_mpunix_daemon_sub_get_type ())
#define COM_MPUNIX_DAEMON_SUB(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_MPUNIX_DAEMON_SUB, ComMpunixDaemonSub))
#define IS_COM_MPUNIX_DAEMON_SUB(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_MPUNIX_DAEMON_SUB))
#define COM_MPUNIX_DAEMON_SUB_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_COM_MPUNIX_DAEMON_SUB, ComMpunixDaemonSubIface))

struct _ComMpunixDaemonSub;
typedef struct _ComMpunixDaemonSub ComMpunixDaemonSub;
typedef struct _ComMpunixDaemonSubIface ComMpunixDaemonSubIface;

struct _ComMpunixDaemonSubIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_sub) (
    ComMpunixDaemonSub *object,
    GDBusMethodInvocation *invocation,
    gint arg_c,
    gint arg_d);

};

GType com_mpunix_daemon_sub_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *com_mpunix_daemon_sub_interface_info (void);
guint com_mpunix_daemon_sub_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void com_mpunix_daemon_sub_complete_sub (
    ComMpunixDaemonSub *object,
    GDBusMethodInvocation *invocation,
    gint result);



/* D-Bus method calls: */
void com_mpunix_daemon_sub_call_sub (
    ComMpunixDaemonSub *proxy,
    gint arg_c,
    gint arg_d,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com_mpunix_daemon_sub_call_sub_finish (
    ComMpunixDaemonSub *proxy,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean com_mpunix_daemon_sub_call_sub_sync (
    ComMpunixDaemonSub *proxy,
    gint arg_c,
    gint arg_d,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_COM_MPUNIX_DAEMON_SUB_PROXY (com_mpunix_daemon_sub_proxy_get_type ())
#define COM_MPUNIX_DAEMON_SUB_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_MPUNIX_DAEMON_SUB_PROXY, ComMpunixDaemonSubProxy))
#define COM_MPUNIX_DAEMON_SUB_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_COM_MPUNIX_DAEMON_SUB_PROXY, ComMpunixDaemonSubProxyClass))
#define COM_MPUNIX_DAEMON_SUB_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_COM_MPUNIX_DAEMON_SUB_PROXY, ComMpunixDaemonSubProxyClass))
#define IS_COM_MPUNIX_DAEMON_SUB_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_MPUNIX_DAEMON_SUB_PROXY))
#define IS_COM_MPUNIX_DAEMON_SUB_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_COM_MPUNIX_DAEMON_SUB_PROXY))

typedef struct _ComMpunixDaemonSubProxy ComMpunixDaemonSubProxy;
typedef struct _ComMpunixDaemonSubProxyClass ComMpunixDaemonSubProxyClass;
typedef struct _ComMpunixDaemonSubProxyPrivate ComMpunixDaemonSubProxyPrivate;

struct _ComMpunixDaemonSubProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ComMpunixDaemonSubProxyPrivate *priv;
};

struct _ComMpunixDaemonSubProxyClass
{
  GDBusProxyClass parent_class;
};

GType com_mpunix_daemon_sub_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ComMpunixDaemonSubProxy, g_object_unref)
#endif

void com_mpunix_daemon_sub_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ComMpunixDaemonSub *com_mpunix_daemon_sub_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ComMpunixDaemonSub *com_mpunix_daemon_sub_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void com_mpunix_daemon_sub_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ComMpunixDaemonSub *com_mpunix_daemon_sub_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ComMpunixDaemonSub *com_mpunix_daemon_sub_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_COM_MPUNIX_DAEMON_SUB_SKELETON (com_mpunix_daemon_sub_skeleton_get_type ())
#define COM_MPUNIX_DAEMON_SUB_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_MPUNIX_DAEMON_SUB_SKELETON, ComMpunixDaemonSubSkeleton))
#define COM_MPUNIX_DAEMON_SUB_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_COM_MPUNIX_DAEMON_SUB_SKELETON, ComMpunixDaemonSubSkeletonClass))
#define COM_MPUNIX_DAEMON_SUB_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_COM_MPUNIX_DAEMON_SUB_SKELETON, ComMpunixDaemonSubSkeletonClass))
#define IS_COM_MPUNIX_DAEMON_SUB_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_MPUNIX_DAEMON_SUB_SKELETON))
#define IS_COM_MPUNIX_DAEMON_SUB_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_COM_MPUNIX_DAEMON_SUB_SKELETON))

typedef struct _ComMpunixDaemonSubSkeleton ComMpunixDaemonSubSkeleton;
typedef struct _ComMpunixDaemonSubSkeletonClass ComMpunixDaemonSubSkeletonClass;
typedef struct _ComMpunixDaemonSubSkeletonPrivate ComMpunixDaemonSubSkeletonPrivate;

struct _ComMpunixDaemonSubSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ComMpunixDaemonSubSkeletonPrivate *priv;
};

struct _ComMpunixDaemonSubSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType com_mpunix_daemon_sub_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ComMpunixDaemonSubSkeleton, g_object_unref)
#endif

ComMpunixDaemonSub *com_mpunix_daemon_sub_skeleton_new (void);


G_END_DECLS

#endif /* __MPUNIX_DAEMON_SUB_H__ */
